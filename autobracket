#!/usr/bin/python

# todo:
# try with raw input

import sys, os, json, subprocess, commands, tempfile, cStringIO

# Seconds of mtime to consider potential bracketed set
THRESHOLD = 4

# Use only 1, 3, 5 of five-exposure set
SKIP_TWO_AND_FOUR = True

# exif constant?
AUTOBRACKET = 2


def ExifTool(fns, keys):
	keys = [('-' + key) for key in keys]
	cmd = ['exiftool', '-j', '-n'] + keys + fns
	data = subprocess.check_output(cmd, stderr=open('/dev/null', 'w'))
	out = {}
	for d in json.loads(data):
		if 'SourceFile' in d:
			out[d.pop('SourceFile')] = d
	return out


def CheckSet(fns):
	if len(fns) < 2:
		return False
	for data in ExifTool(fns, ['ExposureMode']).values():
		if data.get('ExposureMode') != AUTOBRACKET:
			return False
	return True


def CheckDir():
	files = [(os.path.abspath(fn), os.stat(fn).st_mtime)
	         for fn in os.listdir('.')]
	files.sort()

	sets = []
	prev_tm = 0
	potential_set = []
	for fn, tm in files:
		if abs(tm - prev_tm) > THRESHOLD:
			if CheckSet(potential_set):
				sets.append(potential_set)
			potential_set = []
		potential_set.append(fn)
		prev_tm = tm
	if CheckSet(potential_set):
		sets.append(potential_set)

	return sets


def MapStuff(func, stuff):
	newstuff = []
	for thing in stuff:
		newthing = func(thing)
		if newthing is None:
			newthing = thing
		newstuff.append(newthing)
	return newstuff


def MapLines(func, fn):
	lines = open(fn).read().split('\n')
	lines = MapStuff(func, lines)
	open(fn, 'w').write('\n'.join(lines))


def SetPtoOutputs(pto):
	def Func(line):
		if line.startswith('#hugin_outputLDRBlended'):
					return '#hugin_outputLDRBlended false'
		if line.startswith('#hugin_outputLDRExposureBlended'):
					return '#hugin_outputLDRExposureBlended true'
		if line.startswith('#hugin_outputHDRBlended'):
					return '#hugin_outputHDRBlended true'
	MapLines(Func, pto)


def SetPtoExposures(pto, fns):
	values = ExifTool(fns, ['LightValue'])
	def Func(line):
		words = line.split(' ')
		if words and words[0] == 'i':
			[name] = [word for word in words if word[0:2] == 'n"']
			name = name[2:-1]
			ev = values[name]['LightValue']
			def ReplaceEv(word):
				if word.startswith('Eev'):
					return 'Eev' + repr(ev)
			words = MapStuff(ReplaceEv, words)
			return ' '.join(words)
	MapLines(Func, pto)


def SetPtoOptimizeEmor(pto):
	def Func(line):
		if line == 'v':
			return 'v Ra0 Rb0 Rc0 Rd0 Re0\nv'
	MapLines(Func, pto)


def Action(action, base, fns, *args):
	pto = base + '.pto'
	ptomk = pto + '.mk'
	fused = base + '_fused.tif'
	hdr = base + '_hdr.exr'
	mantiuk = base + '_mantiuk.png'
	fattal = base + '_fattal.png'
	xcf = base + '_layers.xcf'
	clean = base + '_clean'

	def Call(cmd, *args, **kwargs):
		if isinstance(cmd, list):
			print '+', ' '.join(cmd)
		else:
			print '+', cmd
		return subprocess.check_call(cmd, *args, **kwargs)

	def DoAlign():
		"""Align and output pto.
		inputs: images
		outputs: pto
		"""
		Call(['align_image_stack', '-v', '-C', '-p', pto] + fns)

	def DoPto2Mk():
		"""Produce makefile from pto and optimize response curve.
		inputs: pto, images
		outputs: ptomk
		"""
		# Select fused and hdr outputs
		SetPtoOutputs(pto)
		# Copy correct exposure values from exif data
		SetPtoExposures(pto, fns)
		# Optimize response curve
		SetPtoOptimizeEmor(pto)
		Call(['vig_optimize', '-v', '-o', pto, pto])
		# Produce makefile
		Call(['pto2mk', '-o', ptomk, '-p', base, pto])

	def DoFusedAndHdr():
		"""Remap and merge to produce fused and hdr from pto.
		inputs: ptomk, images
		outputs: fused, hdr
		"""
		Call(['make', '-f', ptomk, fused, hdr, 'clean'])

	def DoTonemap():
		"""Tonemap.
		inputs: hdr
		outputs: fattal, mantiuk
		"""
		pfs = tempfile.TemporaryFile()
		Call(['pfsin', hdr], stdout=pfs)

		pfs.seek(0)
		cmd = ('pfstmo_mantiuk06 -v --factor 0.1 --saturation 1.0 | '
				'pfsgamma -g 2.2 | pfsout %s' % commands.mkarg(mantiuk))
		Call(cmd, stdin=pfs, shell=True)

		pfs.seek(0)
		cmd = ('pfstmo_fattal02 -v --alpha 0.1 --beta 0.95 --saturation 1.0 '
				'--noise 0.002 | pfsout %s' % commands.mkarg(fattal))
		Call(cmd, stdin=pfs, shell=True)
		pfs.close()

	def DoXcf():
		"""Combine fused and two tonemapped images into xcf layers.
		inputs: fused, fattal, mantiuk
		outputs: xcf
		"""
		gimpscript = """
(let* ((img (car (gimp-file-load
                    RUN-NONINTERACTIVE "%(fused)s" "%(fused)s")))
       (mantiuk (car (gimp-file-load-layer
                        RUN-NONINTERACTIVE img "%(mantiuk)s")))
       (fattal (car (gimp-file-load-layer
                       RUN-NONINTERACTIVE img "%(fattal)s"))))

 (gimp-drawable-set-name
    (car (gimp-image-get-active-drawable img)) "fused")

 (gimp-image-add-layer img mantiuk -1)
 (gimp-drawable-set-name mantiuk "mantiuk")
 (gimp-layer-set-mode mantiuk NORMAL-MODE)
 (gimp-layer-set-opacity mantiuk 50.0)

 (gimp-image-add-layer img fattal -1)
 (gimp-drawable-set-name fattal "fattal")
 (gimp-layer-set-mode fattal OVERLAY-MODE)
 (gimp-layer-set-opacity fattal 50.0)

 (gimp-xcf-save
    0 img (car (gimp-image-get-active-drawable img)) "%(xcf)s" "%(xcf)s")

 (gimp-quit 0))
		""" % {'fused': fused, 'mantiuk': mantiuk, 'fattal': fattal,
		       'xcf': xcf }
		Call(['gimp', '--verbose', '-i', '-d', '-f', '-b', gimpscript])

	def DoGenerate(out, targets):
		if SKIP_TWO_AND_FOUR and len(fns) == 5:
			fns[:] = [fns[0], fns[2], fns[4]]
		targets.append((xcf, clean))
		out.write("""
%(pto)s: %(images)s
	$(ACTION) align %(base)s %(images)s

%(ptomk)s: %(pto)s %(images)s
	$(ACTION) pto2mk %(base)s %(images)s

%(fused)s %(hdr)s: %(ptomk)s %(images)s
	$(ACTION) fusedandhdr %(base)s %(images)s

%(mantiuk)s %(fattal)s: %(hdr)s
	$(ACTION) tonemap %(base)s %(images)s

%(xcf)s: %(fused)s %(mantiuk)s %(fattal)s
	$(ACTION) xcf %(base)s %(images)s

%(clean)s:
	-rm -f %(pto)s %(ptomk)s %(fused)s %(hdr)s %(mantiuk)s %(fattal)s
		""" % {'base': base, 'pto': pto, 'ptomk': ptomk, 'fused': fused,
		       'hdr': hdr, 'mantiuk': mantiuk, 'fattal': fattal, 'xcf': xcf,
		       'clean': clean, 'images': ' '.join(fns)})

	actionmap = {
		'align': DoAlign,
		'pto2mk': DoPto2Mk,
		'fusedandhdr': DoFusedAndHdr,
		'tonemap': DoTonemap,
		'xcf': DoXcf,
		'gen': DoGenerate,
		}
	actionmap[action](*args)


def GenMakefile(sets):
	targets = []
	out = cStringIO.StringIO()
	for fns in sets:
		base = os.path.splitext(os.path.basename(fns[0]))[0].lower()
		Action('gen', base, fns, out, targets)
	all_xcf = ' '.join(xcf for (xcf, _) in targets)
	all_clean = ' '.join(clean for (_, clean) in targets)

	cwd = os.getcwd()
	if '/pics/' in cwd:
		cwd = cwd.replace('/pics/', '/exportpics/')
		cwd = cwd.lower()
		if not os.path.isdir(cwd):
			os.makedirs(cwd)
		makepath = os.path.join(cwd, 'Makefile')
	else:
		makepath = 'Makefile'

	make = file(makepath, 'w')
	make.write('# auto-generated by autobracket\n\n')
	make.write('ACTION = autobracket --action\n\n')
	make.write('all: %s\n\n' % all_xcf)
	make.write('clean: %s\n\n' % all_clean)
	make.write('cleanall: clean\n\t-rm -f %s\n\n' % all_xcf)
	out.reset()
	make.write(out.read())
	make.close()

def main(argv):
	if len(argv) > 1 and argv[1] == '--action':
		Action(argv[2], argv[3], argv[4:])
	else:
		sets = CheckDir()
		print 'Found %d sets' % len(sets)
		GenMakefile(sets)



if __name__ == '__main__':
	main(sys.argv)
