#!/usr/bin/python

import sys, os

join = os.path.join

PICK = 1
REJECT = 2

def IsAspXmpRejected(fn):
	if not fn.endswith('.xmp'):
		return False

	lines = [l.strip() for l in file(fn)]

	def GetIntValues(key):
		return [int(l.split('=')[1].strip('">'))
		        for l in lines if l.startswith(key + '=')]

	try:
		[versions] = GetIntValues('dmf:versionCount')
		tags = GetIntValues('bopt:tag')[:versions]
		return all(t == REJECT for t in tags)
	except (ValueError, IndexError):
		#print '%s: not an ASP xmp file?' % fn
		return False


def CleanupDir(d):
	out = set()
	for xmp in sorted(os.listdir(d)):
		xmp = join(d, xmp)
		pic = xmp[:-4]
		if IsAspXmpRejected(xmp) and os.path.isfile(pic):
			out.add(pic)
	return out


def RecursiveCleanupDir(d):
	out = set()
	if os.path.isdir(d):
		out.update(CleanupDir(d))
		for fn in sorted(os.listdir(d)):
			out.update(RecursiveCleanupDir(join(d, fn)))
	return out


def main(argv):
	todel = list(RecursiveCleanupDir('.'))
	mb = sum(os.stat(fn).st_size for fn in todel) / 1024 / 1024
	print 'Found %d files totaling %d MB.' % (len(todel), mb)
	print 'Make sure everything has been backed up first!'
	yn = raw_input('Are you sure you want to delete them? ')
	if yn.lower() == 'yes':
		for fn in todel:
			os.unlink(fn)
		print 'Done.'
	else:
		print 'Aborted.'


if __name__ == '__main__':
	main(sys.argv)
